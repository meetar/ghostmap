camera:
    type: perspective
    focal_length: [[16, 2], [17, 2.5], [18, 3], [19, 4], [20, 6]] # pairs of [zoom, focal len]
    vanishing_point: [-.25, -.25] # slightly off-center viewing angle, towards lower-left of screen

# lights:
#     type: night

styles:
    water:
        base: polygons
        animated: true
        shaders:
            defines:
                EFFECT_NOISE_ANIMATED: true
            transforms:
                globals:
                    url: node_modules/tangram/demos/shaders/glsl-noise-periodic-3d.glsl
                fragment:
                    url: node_modules/tangram/demos/shaders/noise.glsl


    ghostbuildings:
        base: polygons
        animated: true

        shaders:
            uniforms:
                u_frequency: 100.
            transforms:
                globals:
                    - url: shaders/ghostnoise.glsl
                    - uniform float u_frequency;
                fragment: |
                    vec3 vPos = v_world_position.xyz / u_frequency;

                    float noiseColor = 2. * noise(vPos.xyz * 0.1 + (u_time / 5.));

                    color.a = noiseColor;

    ghosts:
        base: polygons
        animated: true
        texcoords: true
        shaders:
            uniforms:
                u_texture: images/ghost_strip.gif
                u_frequency: 100.
            transforms:
                globals:
                    - url: shaders/ghostnoise.glsl
                    - uniform float u_frequency;
                fragment: |
                    float number_of_frames = 2.;
                    float frames_per_second = 2.;

                    float offset = floor(mod(u_time * frames_per_second, 2.))*.5;
                    color.rgb = texture2D(u_texture, (vec2(v_texcoord.x/number_of_frames, v_texcoord.y) + vec2(offset, 0.))).rgb;
                    if (color.rgb == vec3(0.)) discard;

                    vec3 vPos = v_world_position.xyz / u_frequency;

                    float noiseColor = 2. * noise(vPos.xyz * 0.1 + (u_time / 5.));

                    // vary maximum alpha by zoom
                    color.a = 1. - ((16. - clamp(u_map_zoom, 13., 16.)) * .3) - noiseColor;


layers:
    earth:
        data: { source: osm }
        draw:
            polygons:
                color:
                    default: [0.175, 0.175, 0.175]

    landuse:
        data: { source: osm }
        draw:
            polygons:
                color:
                    default: [0.5, 0.675, 0.5]
                    pitch: [0.3, 0.675, 0.3]
                # interactive: true

    water:
        data: { source: osm }
        draw:
            water:
                color:
                    default: [0.5, 0.5, 0.875]
                outline:
                    color:
                        default: [0.6, 0.6, 0.975]
                    width:
                        default:
                            function () {
                                return (
                                    zoom >= 16 &&
                                    (feature.kind != 'ocean' && feature.kind != 'riverbank') &&
                                    (2.5 * Math.log(zoom))
                                );
                            }

    roads:
        data: { source: osm }
        draw:
            lines:
                color: [1., 1., 1.]
                width:
                    default: function (f, t) { return 2 * Math.log(zoom); }
                    highway: function (f, t) { return 3 * Math.log(zoom); }
                    major_road: function (f, t) { return 2.5 * Math.log(zoom); }
                    minor_road: function (f, t) { return 2 * Math.log(zoom); }
                    path: function (f, t) { return 1 * Math.log(zoom); }
                    debug: function (f, t) { return 5; }
                outline:
                    color:
                        default: [0.1, 0.7, 0.7]
                    width:
                        default:
                            function (f, t) { return (zoom >= 18 && (2/8 * Math.log(zoom))); }
                        highway:
                            function (f, t) { return (zoom >= 18 && (3/8 * Math.log(zoom))); }
                        major_road:
                            function (f, t) { return (zoom >= 18 && (2.5/8 * Math.log(zoom))); }
                        minor_road:
                            function (f, t) { return (zoom >= 18 && (2/8 * Math.log(zoom))); }
                        path:
                            function (f, t) { return (zoom >= 18 && (2/8 * Math.log(zoom))); }
                        debug:
                            function (f, t) { return (zoom >= 18 && (2/8 * Math.log(zoom))); }

    buildings:
        data: { source: osm }
        draw:
            ghostbuildings:
                color:
                    default: [.5, .5, .5]
                outline:
                    color: [1, 1, 1]
                    width: Style.pixels(1)
                extrude: function (f, t) { return ((zoom >= 15 && feature.height > 20) || zoom >= 16) }

    ghostland:
        data: { source: osm }
            draw:
                ghosts:
                filter: |
                    function (f) {
                        var types = ["cemetery"];
                        var blacklist = ["Holocaust"];
                        if (feature.name != null &&
                            feature.kind != null &&
                            types.indexOf(feature.kind) > -1) {
                            // partial match blacklist
                            for (var i = 0; i < blacklist.length; i++) {
                                var re = new RegExp(blacklist[i], "gi"); // gi = case insensitive
                                if (feature.name.match(re)) {
                                    //console.log(feature.name +" - "+blacklist[i]);
                                    return false;
                                }
                            }
                            return true;
                        }
                        return false;
                    }
                interactive: true
                color: [.5, .5, .5]
                size: Style.pixels(function () { return (15./8.)*zoom-(35./2.); })

    ghostbuildings:
        data: { source: osm }
        filter: |
            function (f) {
                var types = ["church", "library", "museum", "place_of_worship","police"];
                var blacklist = ["Memorial Museum", "Jewish", "Holocaust"];
                if (feature.name != null &&
                    feature.kind != null &&
                    types.indexOf(feature.kind) > -1) {

                    // partial match blacklist
                    for (var i = 0; i < blacklist.length; i++) {
                        var re = new RegExp(blacklist[i], "gi"); // gi = case insensitive
                        if (feature.name.match(re)) {
                            //console.log(feature.name +" - "+blacklist[i]);
                            return false;
                        }
                    }
                    return true;
                }
                return false;
            }
        draw:
            ghosts:
                interactive: true
                color: [.5, .5, .5]
                size: Style.pixels(function () { return (15./8.)*zoom-(35./2.); })

    pois:
        data: { source: osm }
        interactive: true
        filter: |
            function (f) {
                var types = ["church", "library", "museum", "place_of_worship","police"];
                var blacklist = ["Memorial Museum", "Jewish", "Holocaust"];
                if (feature.name != null &&
                    feature.kind != null &&
                    types.indexOf(feature.kind) > -1) {

                    // partial match blacklist
                    for (var i = 0; i < blacklist.length; i++) {
                        var re = new RegExp(blacklist[i], "gi"); // gi = case insensitive
                        if (feature.name.match(re)) {
                            //console.log(feature.name +" - "+blacklist[i]);
                            return false;
                        }
                    }
                    return true;
                }
                return false;
            }
        draw:
            ghosts:
                color: [1, 1, 0]
                size: Style.pixels(function () { return (15./8.)*zoom-(35./2.); })
